// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// sommelier HTTP server types
//
// Command:
// $ goa gen goa.design/goa/examples/cellar/design -o
// $(GOPATH)/src/goa.design/goa/examples/cellar

package server

import (
	sommelier "goa.design/goa/examples/cellar/gen/sommelier"
)

// PickRequestBody is the type of the "sommelier" service "pick" endpoint HTTP
// request body.
type PickRequestBody struct {
	// Name of bottle to pick
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Varietals in preference order
	Varietal []string `form:"varietal,omitempty" json:"varietal,omitempty" xml:"varietal,omitempty"`
	// Winery of bottle to pick
	Winery *string `form:"winery,omitempty" json:"winery,omitempty" xml:"winery,omitempty"`
}

// PickNoCriteriaResponseBody is the type of the "sommelier" service "pick"
// endpoint HTTP response body for the "no_criteria" error.
type PickNoCriteriaResponseBody string

// PickNoMatchResponseBody is the type of the "sommelier" service "pick"
// endpoint HTTP response body for the "no_match" error.
type PickNoMatchResponseBody string

type ExpandedStoredBottleCollection []*ExpandedStoredBottle

type ExpandedStoredBottle struct {
	// ID is the unique id of the bottle.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of bottle
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Winery that produces wine
	Winery *ExpandedWinery `form:"winery,omitempty" json:"winery,omitempty" xml:"winery,omitempty"`
	// Vintage of bottle
	Vintage *uint32 `form:"vintage,omitempty" json:"vintage,omitempty" xml:"vintage,omitempty"`
	// Composition is the list of grape varietals and associated percentage.
	Composition []*ExpandedComponent `form:"composition,omitempty" json:"composition,omitempty" xml:"composition,omitempty"`
	// Description of bottle
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Rating of bottle from 1 (worst) to 5 (best)
	Rating *uint32 `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
	// View to render.
	View string `form:"view" json:"view" xml:"view"`
}

type ExpandedWinery struct {
	// Name of winery
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Region of winery
	Region *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	// Country of winery
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Winery website URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// View to render.
	View string `form:"view" json:"view" xml:"view"`
}

type ExpandedComponent struct {
	// Grape varietal
	Varietal *string `form:"varietal,omitempty" json:"varietal,omitempty" xml:"varietal,omitempty"`
	// Percentage of varietal in wine
	Percentage *uint32 `form:"percentage,omitempty" json:"percentage,omitempty" xml:"percentage,omitempty"`
}

// NewExpandedStoredBottleCollection builds the HTTP response body from the
// result of the "pick" endpoint of the "sommelier" service.
func NewExpandedStoredBottleCollection(res sommelier.ExpandedStoredBottleCollection) ExpandedStoredBottleCollection {
	body := make([]*ExpandedStoredBottle, len(res))
	for i, val := range res {
		body[i] = &ExpandedStoredBottle{
			ID:          val.ID,
			Name:        val.Name,
			Vintage:     val.Vintage,
			Description: val.Description,
			Rating:      val.Rating,
			View:        val.View,
		}
		if val.Winery != nil {
			body[i].Winery = marshalExpandedWineryToExpandedWinery(val.Winery)
		}
		if val.Composition != nil {
			body[i].Composition = make([]*ExpandedComponent, len(val.Composition))
			for j, val := range val.Composition {
				body[i].Composition[j] = &ExpandedComponent{
					Varietal:   val.Varietal,
					Percentage: val.Percentage,
				}
			}
		}
	}
	return body
}

// NewPickNoCriteriaResponseBody builds the HTTP response body from the result
// of the "pick" endpoint of the "sommelier" service.
func NewPickNoCriteriaResponseBody(res sommelier.NoCriteria) PickNoCriteriaResponseBody {
	body := PickNoCriteriaResponseBody(res)
	return body
}

// NewPickNoMatchResponseBody builds the HTTP response body from the result of
// the "pick" endpoint of the "sommelier" service.
func NewPickNoMatchResponseBody(res sommelier.NoMatch) PickNoMatchResponseBody {
	body := PickNoMatchResponseBody(res)
	return body
}

// NewPickCriteria builds a sommelier service pick endpoint payload.
func NewPickCriteria(body *PickRequestBody) *sommelier.Criteria {
	v := &sommelier.Criteria{
		Name:   body.Name,
		Winery: body.Winery,
	}
	if body.Varietal != nil {
		v.Varietal = make([]string, len(body.Varietal))
		for j, val := range body.Varietal {
			v.Varietal[j] = val
		}
	}
	return v
}
