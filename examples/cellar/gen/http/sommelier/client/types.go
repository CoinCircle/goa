// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// sommelier HTTP client types
//
// Command:
// $ goa gen goa.design/goa/examples/cellar/design -o
// $(GOPATH)/src/goa.design/goa/examples/cellar

package client

import (
	"unicode/utf8"

	goa "goa.design/goa"
	sommelier "goa.design/goa/examples/cellar/gen/sommelier"
)

// PickRequestBody is the type of the "sommelier" service "pick" endpoint HTTP
// request body.
type PickRequestBody struct {
	// Name of bottle to pick
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Varietals in preference order
	Varietal []string `form:"varietal,omitempty" json:"varietal,omitempty" xml:"varietal,omitempty"`
	// Winery of bottle to pick
	Winery *string `form:"winery,omitempty" json:"winery,omitempty" xml:"winery,omitempty"`
}

// PickNoCriteriaResponseBody is the type of the "sommelier" service "pick"
// endpoint HTTP response body for the "no_criteria" error.
type PickNoCriteriaResponseBody string

// PickNoMatchResponseBody is the type of the "sommelier" service "pick"
// endpoint HTTP response body for the "no_match" error.
type PickNoMatchResponseBody string

type ExpandedStoredBottleCollection []*ExpandedStoredBottle

type ExpandedStoredBottle struct {
	// ID is the unique id of the bottle.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of bottle
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Winery that produces wine
	Winery *ExpandedWinery `form:"winery,omitempty" json:"winery,omitempty" xml:"winery,omitempty"`
	// Vintage of bottle
	Vintage *uint32 `form:"vintage,omitempty" json:"vintage,omitempty" xml:"vintage,omitempty"`
	// Composition is the list of grape varietals and associated percentage.
	Composition []*ExpandedComponent `form:"composition,omitempty" json:"composition,omitempty" xml:"composition,omitempty"`
	// Description of bottle
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Rating of bottle from 1 (worst) to 5 (best)
	Rating *uint32 `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
	// View to render.
	View string `form:"view" json:"view" xml:"view"`
}

type ExpandedWinery struct {
	// Name of winery
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Region of winery
	Region *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	// Country of winery
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Winery website URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// View to render.
	View string `form:"view" json:"view" xml:"view"`
}

type ExpandedComponent struct {
	// Grape varietal
	Varietal *string `form:"varietal,omitempty" json:"varietal,omitempty" xml:"varietal,omitempty"`
	// Percentage of varietal in wine
	Percentage *uint32 `form:"percentage,omitempty" json:"percentage,omitempty" xml:"percentage,omitempty"`
}

// NewPickRequestBody builds the HTTP request body from the payload of the
// "pick" endpoint of the "sommelier" service.
func NewPickRequestBody(p *sommelier.Criteria) *PickRequestBody {
	body := &PickRequestBody{
		Name:   p.Name,
		Winery: p.Winery,
	}
	if p.Varietal != nil {
		body.Varietal = make([]string, len(p.Varietal))
		for j, val := range p.Varietal {
			body.Varietal[j] = val
		}
	}
	return body
}

// NewPickNoCriteria builds a sommelier service pick endpoint no_criteria error.
func NewPickNoCriteria(body PickNoCriteriaResponseBody) sommelier.NoCriteria {
	v := sommelier.NoCriteria(body)
	return v
}

// NewPickNoMatch builds a sommelier service pick endpoint no_match error.
func NewPickNoMatch(body PickNoMatchResponseBody) sommelier.NoMatch {
	v := sommelier.NoMatch(body)
	return v
}

// toDefault converts ExpandedStoredBottleCollection type to
// sommelier.StoredBottleCollection result type using the default view.
func (e ExpandedStoredBottleCollection) toDefault() sommelier.StoredBottleCollection {
	res := make(sommelier.StoredBottleCollection, len(e))
	for i, val := range e {
		c := &sommelier.StoredBottle{
			Description: val.Description,
			Rating:      val.Rating,
		}
		if val.ID != nil {
			c.ID = *val.ID
		}
		if val.Name != nil {
			c.Name = *val.Name
		}
		if val.Vintage != nil {
			c.Vintage = *val.Vintage
		}
		if val.Composition != nil {
			c.Composition = make([]*sommelier.Component, len(val.Composition))
			for j, val := range val.Composition {
				c.Composition[j] = &sommelier.Component{
					Percentage: val.Percentage,
				}
				if val.Varietal != nil {
					c.Composition[j].Varietal = *val.Varietal
				}
			}
		}
		if val.Winery != nil {
			c.Winery = val.Winery.toDefault()
		}

		res[i] = c
	}

	return res
}

// toTiny converts ExpandedStoredBottleCollection type to
// sommelier.StoredBottleCollection result type using the tiny view.
func (e ExpandedStoredBottleCollection) toTiny() sommelier.StoredBottleCollection {
	res := make(sommelier.StoredBottleCollection, len(e))
	for i, val := range e {
		c := &sommelier.StoredBottle{}
		if val.ID != nil {
			c.ID = *val.ID
		}
		if val.Name != nil {
			c.Name = *val.Name
		}
		if val.Winery != nil {
			c.Winery = val.Winery.toTiny()
		}

		res[i] = c
	}

	return res
}

// toDefault converts ExpandedStoredBottle type to sommelier.StoredBottle
// result type using the default view.
func (e *ExpandedStoredBottle) toDefault() *sommelier.StoredBottle {
	res := &sommelier.StoredBottle{
		Description: e.Description,
		Rating:      e.Rating,
	}
	if e.ID != nil {
		res.ID = *e.ID
	}
	if e.Name != nil {
		res.Name = *e.Name
	}
	if e.Vintage != nil {
		res.Vintage = *e.Vintage
	}
	if e.Composition != nil {
		res.Composition = make([]*sommelier.Component, len(e.Composition))
		for j, val := range e.Composition {
			res.Composition[j] = &sommelier.Component{
				Percentage: val.Percentage,
			}
			if val.Varietal != nil {
				res.Composition[j].Varietal = *val.Varietal
			}
		}
	}
	if e.Winery != nil {
		res.Winery = e.Winery.toDefault()
	}

	return res
}

// toTiny converts ExpandedStoredBottle type to sommelier.StoredBottle result
// type using the tiny view.
func (e *ExpandedStoredBottle) toTiny() *sommelier.StoredBottle {
	res := &sommelier.StoredBottle{}
	if e.ID != nil {
		res.ID = *e.ID
	}
	if e.Name != nil {
		res.Name = *e.Name
	}
	if e.Winery != nil {
		res.Winery = e.Winery.toTiny()
	}

	return res
}

// toDefault converts ExpandedWinery type to sommelier.Winery result type using
// the default view.
func (e *ExpandedWinery) toDefault() *sommelier.Winery {
	res := &sommelier.Winery{
		URL: e.URL,
	}
	if e.Name != nil {
		res.Name = *e.Name
	}
	if e.Region != nil {
		res.Region = *e.Region
	}
	if e.Country != nil {
		res.Country = *e.Country
	}
	return res
}

// toTiny converts ExpandedWinery type to sommelier.Winery result type using
// the tiny view.
func (e *ExpandedWinery) toTiny() *sommelier.Winery {
	res := &sommelier.Winery{}
	if e.Name != nil {
		res.Name = *e.Name
	}
	return res
}

// Validate runs the validations defined on ExpandedStoredBottleCollection.
func (e ExpandedStoredBottleCollection) Validate() (err error) {

	for _, c := range e {
		switch c.View {
		case "default":
			if c.ID == nil {
				err = goa.MergeErrors(err, goa.MissingFieldError("id", "c"))
			}
			if c.Name == nil {
				err = goa.MergeErrors(err, goa.MissingFieldError("name", "c"))
			}
			if c.Winery == nil {
				err = goa.MergeErrors(err, goa.MissingFieldError("winery", "c"))
			}
			if c.Vintage == nil {
				err = goa.MergeErrors(err, goa.MissingFieldError("vintage", "c"))
			}
			if c.Name != nil {
				if utf8.RuneCountInString(*c.Name) > 100 {
					err = goa.MergeErrors(err, goa.InvalidLengthError("c.name", *c.Name, utf8.RuneCountInString(*c.Name), 100, false))
				}
			}
			if c.Vintage != nil {
				if *c.Vintage < 1900 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("c.vintage", *c.Vintage, 1900, true))
				}
			}
			if c.Vintage != nil {
				if *c.Vintage > 2020 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("c.vintage", *c.Vintage, 2020, false))
				}
			}
			for _, e := range c.Composition {
				if e != nil {
					if err2 := e.Validate(); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if c.Description != nil {
				if utf8.RuneCountInString(*c.Description) > 2000 {
					err = goa.MergeErrors(err, goa.InvalidLengthError("c.description", *c.Description, utf8.RuneCountInString(*c.Description), 2000, false))
				}
			}
			if c.Rating != nil {
				if *c.Rating < 1 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("c.rating", *c.Rating, 1, true))
				}
			}
			if c.Rating != nil {
				if *c.Rating > 5 {
					err = goa.MergeErrors(err, goa.InvalidRangeError("c.rating", *c.Rating, 5, false))
				}
			}
			if c.Winery != nil {
				if err2 := c.Winery.Validate(); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		case "tiny":
			if c.ID == nil {
				err = goa.MergeErrors(err, goa.MissingFieldError("id", "c"))
			}
			if c.Name == nil {
				err = goa.MergeErrors(err, goa.MissingFieldError("name", "c"))
			}
			if c.Winery == nil {
				err = goa.MergeErrors(err, goa.MissingFieldError("winery", "c"))
			}
			if c.Name != nil {
				if utf8.RuneCountInString(*c.Name) > 100 {
					err = goa.MergeErrors(err, goa.InvalidLengthError("c.name", *c.Name, utf8.RuneCountInString(*c.Name), 100, false))
				}
			}
			if c.Winery != nil {
				if err2 := c.Winery.Validate(); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
	}

	return
}

// Validate runs the validations defined on ExpandedStoredBottle.
func (e *ExpandedStoredBottle) Validate() (err error) {
	switch e.View {
	case "default":
		if e.ID == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("id", "e"))
		}
		if e.Name == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("name", "e"))
		}
		if e.Winery == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("winery", "e"))
		}
		if e.Vintage == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("vintage", "e"))
		}
		if e.Name != nil {
			if utf8.RuneCountInString(*e.Name) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("e.name", *e.Name, utf8.RuneCountInString(*e.Name), 100, false))
			}
		}
		if e.Vintage != nil {
			if *e.Vintage < 1900 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("e.vintage", *e.Vintage, 1900, true))
			}
		}
		if e.Vintage != nil {
			if *e.Vintage > 2020 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("e.vintage", *e.Vintage, 2020, false))
			}
		}
		for _, e := range e.Composition {
			if e != nil {
				if err2 := e.Validate(); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if e.Description != nil {
			if utf8.RuneCountInString(*e.Description) > 2000 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("e.description", *e.Description, utf8.RuneCountInString(*e.Description), 2000, false))
			}
		}
		if e.Rating != nil {
			if *e.Rating < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("e.rating", *e.Rating, 1, true))
			}
		}
		if e.Rating != nil {
			if *e.Rating > 5 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("e.rating", *e.Rating, 5, false))
			}
		}
		if e.Winery != nil {
			if err2 := e.Winery.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	case "tiny":
		if e.ID == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("id", "e"))
		}
		if e.Name == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("name", "e"))
		}
		if e.Winery == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("winery", "e"))
		}
		if e.Name != nil {
			if utf8.RuneCountInString(*e.Name) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("e.name", *e.Name, utf8.RuneCountInString(*e.Name), 100, false))
			}
		}
		if e.Winery != nil {
			if err2 := e.Winery.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}

	return
}

// Validate runs the validations defined on ExpandedWinery.
func (e *ExpandedWinery) Validate() (err error) {
	switch e.View {
	case "default":
		if e.Name == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("name", "e"))
		}
		if e.Region == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("region", "e"))
		}
		if e.Country == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("country", "e"))
		}
		if e.Region != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("e.region", *e.Region, "(?i)[a-z '\\.]+"))
		}
		if e.Country != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("e.country", *e.Country, "(?i)[a-z '\\.]+"))
		}
		if e.URL != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("e.url", *e.URL, "(?i)^(https?|ftp)://[^\\s/$.?#].[^\\s]*$"))
		}
	case "tiny":
		if e.Name == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("name", "e"))
		}
	}

	return
}

// Validate runs the validations defined on ExpandedComponent.
func (e *ExpandedComponent) Validate() (err error) {
	if e.Varietal == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("varietal", "e"))
	}
	if e.Varietal != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("e.varietal", *e.Varietal, "[A-Za-z' ]+"))
	}
	if e.Varietal != nil {
		if utf8.RuneCountInString(*e.Varietal) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("e.varietal", *e.Varietal, utf8.RuneCountInString(*e.Varietal), 100, false))
		}
	}
	if e.Percentage != nil {
		if *e.Percentage < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("e.percentage", *e.Percentage, 1, true))
		}
	}
	if e.Percentage != nil {
		if *e.Percentage > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("e.percentage", *e.Percentage, 100, false))
		}
	}
	return
}
